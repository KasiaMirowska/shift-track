generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubjectType {
  PERSON
  ORGANIZATION
  POLICY
  TOPIC
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
}

model Subject {
  id        String      @id @default(cuid())
  slug      String      @unique   
  name      String
  type      SubjectType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  watches   SubjectWatch[]
  sources   SubjectSource[]
  opinions  Opinion[]
  @@unique([name, type])
}

model SubjectWatch {
  id        String        @id @default(cuid())
  subjectId String
  query     String
  enabled   Boolean       @default(true)
  createdAt DateTime      @default(now())

  subject   Subject       @relation(fields: [subjectId], references: [id])
  feeds     SubjectFeed[]
  @@index([subjectId])
}

model SubjectFeed {
  id        String       @id @default(cuid())
  watchId   String
  url       String
  createdAt DateTime     @default(now())
  watch     SubjectWatch @relation(fields: [watchId], references: [id])

  @@unique([watchId, url])
}

model Publication {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  domain    String   @unique
  createdAt DateTime @default(now())

  sources   Source[]
  @@index([name])
  metrics   PublicationMetricDaily[]
}

model Source {
  id            String        @id @default(cuid())
  url           String        @unique
  title         String
  publicationId String?
  published     DateTime
  createdAt     DateTime      @default(now())

  excerpt       String?
  summary       String?
  sentiment     Float?
  textHash      String?       @unique
  wordCount     Int?

  article       ArticleText?

  publication   Publication?  @relation(fields: [publicationId], references: [id])
  subjects      SubjectSource[]
  opinions      Opinion[]

  ingestion     IngestionEvent[]
  @@index([published])
  @@index([publicationId, published])
}

model SubjectSource {
  subjectId String
  sourceId  String
  createdAt DateTime @default(now())

  subject   Subject @relation(fields: [subjectId], references: [id])
  source    Source  @relation(fields: [sourceId], references: [id])

  @@id([subjectId, sourceId])
  @@index([sourceId])
}

model ArticleText {
  sourceId String  @id
  text     String
  source   Source  @relation(fields: [sourceId], references: [id])
}

model Opinion {
  id          String   @id @default(cuid())
  subjectId   String
  sourceId    String
  quote       String
  summary     String?
  sentiment   Float
  stance      String?
  saidAt      DateTime
  createdAt   DateTime  @default(now())

  subject     Subject   @relation(fields: [subjectId], references: [id])
  source      Source    @relation(fields: [sourceId], references: [id])

  @@index([subjectId])
  @@index([sourceId, saidAt])
}

model IngestionEvent {
  id         String   @id @default(cuid())
  sourceUrl  String
  status     String
  detail     String?
  durationMs Int?
  occurredAt DateTime @default(now())
  sourceId   String?
  source     Source?  @relation(fields: [sourceId], references: [id])

  @@index([occurredAt])
  @@index([sourceUrl])
}

model PublicationMetricDaily {
  id            String   @id @default(cuid())
  publicationId String
  day           DateTime
  avgSentiment  Float
  articlesCount Int

  publication   Publication @relation(fields: [publicationId], references: [id])
  @@unique([publicationId, day])
  @@index([day])
}